/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jbpmn.spec;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.netbeans.modeler.core.NBModelerUtil;
import org.netbeans.modeler.specification.model.document.ITextElement;

/**
 * <p>
 * Java class for tExpression complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * <complexType name="tExpression">
 *   <complexContent>
 *     <extension base="{http://www.omg.org/spec/BPMN/20100524/MODEL}tBaseElementWithMixedContent">
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tExpression")
@XmlSeeAlso({
    TFormalExpression.class
})
public class TExpression
        extends TBaseElementWithMixedContent implements ITextElement {

    public TExpression() {

    }

    public TExpression(String content) {
        super.setId(NBModelerUtil.getAutoGeneratedStringId());
        super.setContent(content);
    }

    TFormalExpression getFormalExpression() {
        TFormalExpression formalExpression = new TFormalExpression();
        formalExpression.setId(getId());
        formalExpression.setContent(getContent());
        return formalExpression;
    }

    public boolean isEmpty() {
        if (this.getContent() == null || this.getContent().trim().isEmpty()) {
            return true;
        }
        return false;
    }

}
