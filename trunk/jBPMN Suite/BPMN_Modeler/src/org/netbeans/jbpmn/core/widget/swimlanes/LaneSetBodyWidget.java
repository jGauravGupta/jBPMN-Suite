/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jbpmn.core.widget.swimlanes;

import java.awt.Color;
import java.awt.Dimension;
import java.util.LinkedList;
import java.util.List;
import javax.swing.BorderFactory;
import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.modeler.scene.AbstractModelerScene;
import org.netbeans.modeler.widget.node.ContainerWidget;

public class LaneSetBodyWidget extends ContainerWidget {

//        public LaneSetBodyWidget(BPMNScene scene, LayerWidget mainLayer, LayerWidget interactionLayer, LayerWidget connectionLayer, NodeWidgetInfo node) {
//            super(scene, mainLayer, interactionLayer, connectionLayer, node);
//        }
//
//        public LaneSetBodyWidget(BPMNScene scene, LayerWidget mainLayer, LayerWidget interactionLayer, LayerWidget connectionLayer) {
//            super(scene, mainLayer, interactionLayer, connectionLayer, new NodeWidgetInfo(BPMNUtil.getAutoGeneratedStringId(), BPMNDocumentFactory.getBpmnDocument("LaneSet_Body"), null));
//        }
    public LaneSetBodyWidget(AbstractModelerScene scene) {
        super(scene);
        setLayout(LayoutFactory.createVerticalFlowLayout(LayoutFactory.SerialAlignment.JUSTIFY, 0));
        this.setPreferredSize(new Dimension(320, 100));
        this.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));

    }
    private LaneSetWidget laneSetWidget;
    private List<LaneWidget> laneWidgets = new LinkedList<LaneWidget>();

    public void addLane(LaneWidget laneWidget) {
        this.addChild(laneWidget);
        laneWidgets.add(laneWidget);


    }

    public void manageLane() {
        double height = 0;
        for (LaneWidget laneWidget_Tmp : laneWidgets) {
            height += laneWidget_Tmp.getPreferredSize().getHeight();
            System.out.println("height " + height);
        }


        Dimension laneSetHeadWidgetSize = laneSetWidget.getHeadWidget().getPreferredSize();
        laneSetWidget.getHeadWidget().setPreferredSize(new Dimension(laneSetHeadWidgetSize.width, laneSetHeadWidgetSize.height * 2));
        System.out.println("laneSetHeadWidgetSize : " + laneSetHeadWidgetSize);
        laneSetHeadWidgetSize = laneSetWidget.getHeadWidget().getPreferredSize();
        System.out.println("laneSetHeadWidgetSize : " + laneSetHeadWidgetSize);



        Dimension laneSetBodyWidgetSize = laneSetWidget.getBodyWidget().getPreferredSize();
        laneSetWidget.getBodyWidget().setPreferredSize(new Dimension(laneSetBodyWidgetSize.width, laneSetBodyWidgetSize.height * 2));
        System.out.println("laneSetBodyWidgetSize : " + laneSetBodyWidgetSize);
        laneSetBodyWidgetSize = laneSetWidget.getBodyWidget().getPreferredSize();
        System.out.println("laneSetBodyWidgetSize : " + laneSetBodyWidgetSize);

        Dimension laneSetWidgetSize = laneSetWidget.getPreferredSize();
        laneSetWidget.setPreferredSize(new Dimension(laneSetWidgetSize.width, laneSetWidgetSize.height * 2));
        System.out.println("laneSetWidgetSize : " + laneSetWidgetSize);
        laneSetWidgetSize = laneSetWidget.getPreferredSize();
        System.out.println("laneSetWidgetSize : " + laneSetWidgetSize);
//            
//                     
        System.out.println("");

    }

    /**
     * @return the laneWidgets
     */
    public List<LaneWidget> getLaneWidgets() {
        return laneWidgets;
    }

    /**
     * @param laneWidgets the laneWidgets to set
     */
    public void setLaneWidgets(List<LaneWidget> laneWidgets) {
        this.laneWidgets = laneWidgets;
    }

    /**
     * @return the laneSetWidget
     */
    public LaneSetWidget getLaneSetWidget() {
        return laneSetWidget;
    }

    /**
     * @param laneSetWidget the laneSetWidget to set
     */
    public void setLaneSetWidget(LaneSetWidget laneSetWidget) {
        this.laneSetWidget = laneSetWidget;
    }
}