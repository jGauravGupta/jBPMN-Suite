/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jbpmn.modeler.widget.properties.io_specification;

import java.awt.Frame;
import javax.swing.JOptionPane;
import org.netbeans.jbpmn.modeler.specification.bpmn.util.BPMNModelUtil;
import org.netbeans.jbpmn.modeler.widget.properties.itemdefinition.ItemDefinitionPanel;
import org.netbeans.jbpmn.spec.TDataState;
import org.netbeans.jbpmn.spec.TDefinitions;
import org.netbeans.jbpmn.spec.TItemDefinition;
import org.netbeans.jbpmn.spec.TProcess;
import org.netbeans.jbpmn.spec.extend.TDataParam;
import org.netbeans.modeler.core.NBModelerUtil;
import org.netbeans.modeler.core.ModelerFile;
import org.netbeans.modeler.properties.entity.custom.editor.combobox.client.entity.ComboBoxValue;
import org.netbeans.modeler.properties.entity.custom.editor.combobox.client.entity.Entity;
import org.netbeans.modeler.properties.entity.custom.editor.combobox.internal.EntityComponent;

public abstract class DataItemPanel extends EntityComponent<TDataParam> {

    private ModelerFile modelerFile;
    private TDefinitions definition;
    private TProcess process;
    private String actionPanelType;

    /**
     * Creates new form InputParameterPanel
     */
    public DataItemPanel(ModelerFile modelerFile) {
        super((Frame) null, true);
        initComponents();
        this.setSize(575, 300);
        this.modelerFile = modelerFile;
        definition = (TDefinitions) modelerFile.getDefinitionElement();
        process = (TProcess) modelerFile.getRootElement();

    }

    @Override
    public void init() {
        initDataType();
        name_TextField.setText("");
        dataState_TextField.setText("");
        dataType_ComboBox.setSelectedItem(new ComboBoxValue<TItemDefinition>(null, null, ""));
        isCollection_CheckBox.setSelected(false);

    }

    void initDataType() {
        dataType_ComboBox.removeAllItems();
        for (ComboBoxValue<TItemDefinition> itemDefinition : BPMNModelUtil.getItemDefinitionList(modelerFile)) {
            dataType_ComboBox.addItem(itemDefinition);
        }
    }

    @Override
    public void createEntity(Class<? extends Entity> entityWrapperType) {
        this.setTitle("Add New Parameter");
        if (entityWrapperType == ComboBoxValue.class) {
            this.setEntity(new ComboBoxValue<TDataParam>());
        }
    }

    @Override
    public void updateEntity(Entity entityValue) {
        this.setTitle("Update Parameter");
        TDataParam dataParam = null;
        this.setEntity(entityValue);
        if (entityValue.getClass() == ComboBoxValue.class) {
            dataParam = ((ComboBoxValue<TDataParam>) entityValue).getValue();
        }
        name_TextField.setText(dataParam.getName());
        dataState_TextField.setText(dataParam.getDataState() == null ? null : dataParam.getDataState().getName());
        TItemDefinition itemSubjectRef = (TItemDefinition) definition.getRootElement(dataParam.getItemSubjectRef(), TItemDefinition.class);
        if (itemSubjectRef != null) {
            for (int i = 0; i < dataType_ComboBox.getItemCount(); i++) {
                ComboBoxValue<TItemDefinition> itemDefinition_Combo = (ComboBoxValue<TItemDefinition>) dataType_ComboBox.getItemAt(i);
                if (itemDefinition_Combo.getValue() != null && itemDefinition_Combo.getValue().getId().equals(itemSubjectRef.getId())) {
                    dataType_ComboBox.setSelectedItem(itemDefinition_Combo);
                    break;
                }
            }
        }
        isCollection_CheckBox.setSelected(dataParam.isIsCollection());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parameterTypeGroup = new javax.swing.ButtonGroup();
        setting_PopupMenu = new javax.swing.JPopupMenu();
        createItem_MenuItem = new javax.swing.JMenuItem();
        editItem_MenuItem = new javax.swing.JMenuItem();
        deleteItem_MenuItem = new javax.swing.JMenuItem();
        parameterPane = new javax.swing.JLayeredPane();
        name_LayeredPane = new javax.swing.JLayeredPane();
        name_Label = new javax.swing.JLabel();
        name_TextField = new javax.swing.JTextField();
        dataState_LayeredPane = new javax.swing.JLayeredPane();
        dataState_Label = new javax.swing.JLabel();
        dataState_TextField = new javax.swing.JTextField();
        dataType_LayeredPane = new javax.swing.JLayeredPane();
        dataType_Label = new javax.swing.JLabel();
        dataType_ComboBox = new javax.swing.JComboBox();
        dataType_Action = new javax.swing.JButton();
        isCollection_LayeredPane = new javax.swing.JLayeredPane();
        isCollection_Label = new javax.swing.JLabel();
        isCollection_CheckBox = new javax.swing.JCheckBox();
        action_LayeredPane = new javax.swing.JLayeredPane();
        save_Button = new javax.swing.JButton();
        cancel_Button = new javax.swing.JButton();

        createItem_MenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/icon_plus.png"))); // NOI18N
        createItem_MenuItem.setText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.createItem_MenuItem.text")); // NOI18N
        createItem_MenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.createItem_MenuItem.toolTipText")); // NOI18N
        createItem_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createItem_MenuItemActionPerformed(evt);
            }
        });
        setting_PopupMenu.add(createItem_MenuItem);

        editItem_MenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/edit.png"))); // NOI18N
        editItem_MenuItem.setText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.editItem_MenuItem.text")); // NOI18N
        editItem_MenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.editItem_MenuItem.toolTipText")); // NOI18N
        editItem_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItem_MenuItemActionPerformed(evt);
            }
        });
        setting_PopupMenu.add(editItem_MenuItem);

        deleteItem_MenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/resource/delete.png"))); // NOI18N
        deleteItem_MenuItem.setText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.deleteItem_MenuItem.text")); // NOI18N
        deleteItem_MenuItem.setToolTipText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "ResourceDialog.deleteItem_MenuItem.toolTipText")); // NOI18N
        deleteItem_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItem_MenuItemActionPerformed(evt);
            }
        });
        setting_PopupMenu.add(deleteItem_MenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        parameterPane.setPreferredSize(new java.awt.Dimension(535, 110));

        name_LayeredPane.setPreferredSize(new java.awt.Dimension(400, 30));

        name_Label.setText("Name :");
        name_Label.setPreferredSize(new java.awt.Dimension(50, 15));

        name_TextField.setToolTipText("Target Variable Name");

        javax.swing.GroupLayout name_LayeredPaneLayout = new javax.swing.GroupLayout(name_LayeredPane);
        name_LayeredPane.setLayout(name_LayeredPaneLayout);
        name_LayeredPaneLayout.setHorizontalGroup(
            name_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(name_LayeredPaneLayout.createSequentialGroup()
                .addComponent(name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(name_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        name_LayeredPaneLayout.setVerticalGroup(
            name_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(name_LayeredPaneLayout.createSequentialGroup()
                .addGroup(name_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        name_LayeredPane.setLayer(name_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        name_LayeredPane.setLayer(name_TextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dataState_LayeredPane.setName(""); // NOI18N
        dataState_LayeredPane.setPreferredSize(new java.awt.Dimension(400, 30));

        dataState_Label.setText("Data State :");
        dataState_Label.setPreferredSize(new java.awt.Dimension(50, 15));

        dataState_TextField.setToolTipText("Target Variable Data Type");

        javax.swing.GroupLayout dataState_LayeredPaneLayout = new javax.swing.GroupLayout(dataState_LayeredPane);
        dataState_LayeredPane.setLayout(dataState_LayeredPaneLayout);
        dataState_LayeredPaneLayout.setHorizontalGroup(
            dataState_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataState_LayeredPaneLayout.createSequentialGroup()
                .addComponent(dataState_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataState_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataState_LayeredPaneLayout.setVerticalGroup(
            dataState_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataState_LayeredPaneLayout.createSequentialGroup()
                .addGroup(dataState_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataState_LayeredPaneLayout.createSequentialGroup()
                        .addComponent(dataState_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(dataState_TextField))
                .addContainerGap())
        );
        dataState_LayeredPane.setLayer(dataState_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dataState_LayeredPane.setLayer(dataState_TextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dataType_Label.setText("Data Type :");

        dataType_Action.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/jbpmn/modeler/widget/properties/operation/settings.png"))); // NOI18N
        dataType_Action.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dataType_ActionMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dataType_LayeredPaneLayout = new javax.swing.GroupLayout(dataType_LayeredPane);
        dataType_LayeredPane.setLayout(dataType_LayeredPaneLayout);
        dataType_LayeredPaneLayout.setHorizontalGroup(
            dataType_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataType_LayeredPaneLayout.createSequentialGroup()
                .addComponent(dataType_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataType_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(dataType_Action, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataType_LayeredPaneLayout.setVerticalGroup(
            dataType_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataType_LayeredPaneLayout.createSequentialGroup()
                .addGroup(dataType_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataType_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dataType_Label)
                        .addComponent(dataType_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dataType_Action))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        dataType_LayeredPane.setLayer(dataType_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dataType_LayeredPane.setLayer(dataType_ComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dataType_LayeredPane.setLayer(dataType_Action, javax.swing.JLayeredPane.DEFAULT_LAYER);

        isCollection_LayeredPane.setName(""); // NOI18N
        isCollection_LayeredPane.setPreferredSize(new java.awt.Dimension(400, 30));

        isCollection_Label.setText("Is Collection :");
        isCollection_Label.setPreferredSize(new java.awt.Dimension(50, 15));

        javax.swing.GroupLayout isCollection_LayeredPaneLayout = new javax.swing.GroupLayout(isCollection_LayeredPane);
        isCollection_LayeredPane.setLayout(isCollection_LayeredPaneLayout);
        isCollection_LayeredPaneLayout.setHorizontalGroup(
            isCollection_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isCollection_LayeredPaneLayout.createSequentialGroup()
                .addComponent(isCollection_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isCollection_CheckBox)
                .addGap(305, 305, 305))
        );
        isCollection_LayeredPaneLayout.setVerticalGroup(
            isCollection_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isCollection_LayeredPaneLayout.createSequentialGroup()
                .addGroup(isCollection_LayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isCollection_CheckBox)
                    .addComponent(isCollection_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        isCollection_LayeredPane.setLayer(isCollection_Label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        isCollection_LayeredPane.setLayer(isCollection_CheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        save_Button.setText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "SignalPanel.save_Button.text")); // NOI18N
        save_Button.setToolTipText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "SignalPanel.save_Button.toolTipText")); // NOI18N
        save_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_ButtonActionPerformed(evt);
            }
        });
        action_LayeredPane.add(save_Button);
        save_Button.setBounds(0, 0, 57, 23);

        cancel_Button.setText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "SignalPanel.cancel_Button.text")); // NOI18N
        cancel_Button.setToolTipText(org.openide.util.NbBundle.getMessage(DataItemPanel.class, "SignalPanel.cancel_Button.toolTipText")); // NOI18N
        cancel_Button.setPreferredSize(new java.awt.Dimension(60, 23));
        cancel_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_ButtonActionPerformed(evt);
            }
        });
        action_LayeredPane.add(cancel_Button);
        cancel_Button.setBounds(70, 0, 70, 23);

        javax.swing.GroupLayout parameterPaneLayout = new javax.swing.GroupLayout(parameterPane);
        parameterPane.setLayout(parameterPaneLayout);
        parameterPaneLayout.setHorizontalGroup(
            parameterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, parameterPaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(parameterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataState_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataType_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(parameterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(action_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(isCollection_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        parameterPaneLayout.setVerticalGroup(
            parameterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parameterPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(name_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataState_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataType_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isCollection_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(action_LayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        parameterPane.setLayer(name_LayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        parameterPane.setLayer(dataState_LayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        parameterPane.setLayer(dataType_LayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        parameterPane.setLayer(isCollection_LayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        parameterPane.setLayer(action_LayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterPane, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateField() {
        if (this.name_TextField.getText().trim().length() <= 0 /*|| Pattern.compile("[^\\w-]").matcher(this.id_TextField.getText().trim()).find()*/) {
            JOptionPane.showMessageDialog(this, "Parameter name can't be empty", "Invalid Value", javax.swing.JOptionPane.WARNING_MESSAGE);
            return false;
        }//I18n
        return true;
    }

    private void dataType_ActionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataType_ActionMousePressed
        actionPanelType = "dataType";
        setting_PopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
    }//GEN-LAST:event_dataType_ActionMousePressed

    EntityComponent getActionPanel() {
        if ("dataType".equals(actionPanelType)) {
            return new ItemDefinitionPanel(modelerFile);
        } else {
            return null;
        }
    }

    ComboBoxValue getSelectedActionItem() {
        if ("dataType".equals(actionPanelType)) {
            return (ComboBoxValue) dataType_ComboBox.getSelectedItem();
        } else {
            return null;
        }
    }

    private void createItem_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createItem_MenuItemActionPerformed
        EntityComponent itemComponent = getActionPanel();// actionHandler.getItemPanel();

        itemComponent.init();
        itemComponent.createEntity(ComboBoxValue.class);
        itemComponent.setVisible(true);

        if (itemComponent.getDialogResult() == javax.swing.JOptionPane.OK_OPTION) {
            ComboBoxValue comboBoxValue = (ComboBoxValue) itemComponent.getEntity();

            if ("dataType".equals(actionPanelType)) {
                dataType_ComboBox.addItem(comboBoxValue);
                dataType_ComboBox.setSelectedItem(comboBoxValue);
                definition.addItemDefinition((TItemDefinition) comboBoxValue.getValue());
            }
        }
    }//GEN-LAST:event_createItem_MenuItemActionPerformed

    private void editItem_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItem_MenuItemActionPerformed
        ComboBoxValue comboBoxValue;
        try {
            comboBoxValue = getSelectedActionItem();// = (ComboBoxValue) interface_ComboBox.getSelectedItem();

            if (comboBoxValue == null) {
                JOptionPane.showMessageDialog(null, "No element selected !", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            EntityComponent itemComponent = getActionPanel();
            itemComponent.init();
            itemComponent.updateEntity(comboBoxValue);
            itemComponent.setVisible(true);
        } catch (IllegalStateException ex) {
            System.out.println("EX : " + ex.toString());
        }
    }//GEN-LAST:event_editItem_MenuItemActionPerformed

    private void deleteItem_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItem_MenuItemActionPerformed
        ComboBoxValue comboBoxValue;
        try {
            comboBoxValue = getSelectedActionItem();// = (ComboBoxValue) interface_ComboBox.getSelectedItem();

            if (comboBoxValue == null) {
                JOptionPane.showMessageDialog(null, "No element selected !", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            if ("dataType".equals(actionPanelType)) {
                int option = JOptionPane.showConfirmDialog(null, "Are you sue you want to delete this Data Type ?", "Delete Data Type", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    definition.removeRootElement((TItemDefinition) comboBoxValue.getValue());
                    dataType_ComboBox.removeItem(comboBoxValue);
                }
            }
        } catch (IllegalStateException ex) {
            System.out.println("EX : " + ex.toString());
        }
    }//GEN-LAST:event_deleteItem_MenuItemActionPerformed

    public abstract TDataParam createDataParamInstance();

    private void save_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_ButtonActionPerformed
        if (!validateField()) {
            return;
        }
        TDataParam dataParam = null;

        if (this.getEntity().getClass() == ComboBoxValue.class) {
            ComboBoxValue<TDataParam> comboBoxValue = (ComboBoxValue<TDataParam>) this.getEntity();
            if (comboBoxValue.getValue() == null) {
                dataParam = createDataParamInstance();
                dataParam.setId(NBModelerUtil.getAutoGeneratedStringId());
            } else {
                dataParam = comboBoxValue.getValue();
            }

        }
//        else if (this.getEntity().getClass() == RowValue.class) {
//            Object[] row = ((RowValue) this.getEntity()).getRow();
//            if (row[0] == null) {
//                dataParam = new TSignal();
//                dataParam.setId(BPMNUtil.getAutoGeneratedStringId());
//            } else {
//                dataParam = (TSignal) row[0];
//            }
//        }

        dataParam.setName(name_TextField.getText());
        if (!dataState_TextField.getText().trim().isEmpty()) { //BUG : Id change on every update
            TDataState dataState = new TDataState();
            dataState.setId(NBModelerUtil.getAutoGeneratedStringId());
            dataState.setName(dataState_TextField.getText().trim());
            dataParam.setDataState(dataState);
        }
        dataParam.setItemSubjectRef(((ComboBoxValue<TItemDefinition>) dataType_ComboBox.getSelectedItem()).getId());
        if (this.getEntity().getClass() == ComboBoxValue.class) {
            ComboBoxValue<TDataParam> comboBoxValue = (ComboBoxValue<TDataParam>) this.getEntity();
            comboBoxValue.setId(dataParam.getId());
            comboBoxValue.setValue(dataParam);
            comboBoxValue.setDisplayValue(dataParam.getName());
        }
        dataParam.setIsCollection(isCollection_CheckBox.isSelected());

//        else if (this.getEntity().getClass() == RowValue.class) {
//            Object[] row = ((RowValue) this.getEntity()).getRow();
//            row[0] = dataParam;
//            row[1] = dataParam.getName();
//            row[2] = ((ComboBoxValue<TItemDefinition>) dataType_ComboBox.getSelectedItem()).getDisplayValue();
//        }
        saveActionPerformed(evt);
    }//GEN-LAST:event_save_ButtonActionPerformed

    private void cancel_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_ButtonActionPerformed
        cancelActionPerformed(evt);
    }//GEN-LAST:event_cancel_ButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane action_LayeredPane;
    private javax.swing.JButton cancel_Button;
    private javax.swing.JMenuItem createItem_MenuItem;
    private javax.swing.JLabel dataState_Label;
    private javax.swing.JLayeredPane dataState_LayeredPane;
    private javax.swing.JTextField dataState_TextField;
    private javax.swing.JButton dataType_Action;
    private javax.swing.JComboBox dataType_ComboBox;
    protected javax.swing.JLabel dataType_Label;
    private javax.swing.JLayeredPane dataType_LayeredPane;
    private javax.swing.JMenuItem deleteItem_MenuItem;
    private javax.swing.JMenuItem editItem_MenuItem;
    private javax.swing.JCheckBox isCollection_CheckBox;
    private javax.swing.JLabel isCollection_Label;
    private javax.swing.JLayeredPane isCollection_LayeredPane;
    private javax.swing.JLabel name_Label;
    private javax.swing.JLayeredPane name_LayeredPane;
    private javax.swing.JTextField name_TextField;
    private javax.swing.JLayeredPane parameterPane;
    private javax.swing.ButtonGroup parameterTypeGroup;
    private javax.swing.JButton save_Button;
    private javax.swing.JPopupMenu setting_PopupMenu;
    // End of variables declaration//GEN-END:variables

}
